import tkinter as tk from tkinter import ttk, messagebox import random import datetime import matplotlib.pyplot as plt from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg import threading

Dummy AI logic to simulate optimization based on patterns

def ai_optimize(settings): optimized = settings.copy() optimized['Thermostat'] = max(18, min(settings['Thermostat'] - 1, 24)) optimized['Lighting'] = max(0.5, settings['Lighting'] - 0.2) optimized['Appliance Usage'] = max(0.5, settings['Appliance Usage'] - 0.3) return optimized

Suggestion generator based on AI output

def generate_suggestions(optimized): suggestions = [] if optimized['Thermostat'] < 20: suggestions.append("Consider wearing warmer clothes to save heating energy.") if optimized['Lighting'] < 0.8: suggestions.append("Make use of natural daylight whenever possible.") if optimized['Appliance Usage'] < 0.8: suggestions.append("Unplug appliances when not in use to avoid phantom loads.") return suggestions

class EnergyOptimizerApp: def init(self, root): self.root = root self.root.title("Home Energy Efficiency Optimizer") self.root.geometry("800x600") self.root.configure(bg="#f0f4f7")

self.settings = {
        'Thermostat': 22,
        'Lighting': 1.0,
        'Appliance Usage': 1.0
    }

    self.build_gui()

def build_gui(self):
    title = tk.Label(self.root, text="Energy Efficiency Optimization", font=("Arial",